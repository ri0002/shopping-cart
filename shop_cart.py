# -*- coding: utf-8 -*-
"""第１回_ShopCartクラスの作成_G241TG2002_石川遼太郎

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mXryOiFwAcCIDabpy52sEvNQuhITUpNL
"""

import csv

class ShopCart:
    def __init__(self):
        self.prices = []  # 値段を格納するリスト

    def validate_price(self, price):
        """
        価格が正の数値であることを検証
        入力が無効な場合はエラーメッセージを含む例外を発生させる
        """
        try:
            price = float(price)
            if price <= 0:
                raise ValueError("値段は0より大きい正の数値である必要があります（例: 50、100、200.5など）。")
            return price
        except ValueError:
            raise ValueError("エラー: 値段は正の数値を入力してください（例: 50、100、200.5）。")
        except TypeError:
            raise TypeError("値段の入力には数値または文字列を使用してください。")

    def add_price(self, price):
        """
        値段を追加する
        """
        try:
            valid_price = self.validate_price(price)
            self.prices.append(valid_price)
            print(f"値段 {valid_price} を追加しました。")
        except (ValueError, TypeError) as e:
            print(f"エラー: {e}")

    def get_sum_price(self):
        """
        合計金額を計算して返す
        """
        return sum(self.prices)

    def show_prices(self):
        """
        すべての値段一覧を表示する
        値段がない場合はメッセージを返す
        """
        return ", ".join(f"{price:.2f}" for price in self.prices) if self.prices else "値段がありません。"

    def get_price_count(self):
        """
        値段の数を取得する
        """
        return len(self.prices)

    def remove_price(self, index):
        """
        指定されたインデックスの値段を削除する
        """
        try:
            index = int(index)
            if index < 0 or index >= len(self.prices):
                raise IndexError("インデックスが範囲外です。")
            removed_price = self.prices.pop(index)
            print(f"値段 {removed_price} を削除しました。")
        except (ValueError, IndexError) as e:
            print(f"エラー: {e}")

    def update_price(self, index, new_price):
        """
        指定されたインデックスの値段を更新する
        """
        try:
            index = int(index)
            new_price = self.validate_price(new_price)
            if index < 0 or index >= len(self.prices):
                raise IndexError("インデックスが範囲外です。")
            self.prices[index] = new_price
            print(f"値段を {new_price} に更新しました。")
        except (ValueError, IndexError, TypeError) as e:
            print(f"エラー: {e}")

    def categorize_prices(self):
        """
        値段をカテゴリに分けて表示する
        安い: 100未満, 普通: 100以上500未満, 高い: 500以上
        """
        cheap = [price for price in self.prices if price < 100]
        medium = [price for price in self.prices if 100 <= price < 500]
        expensive = [price for price in self.prices if price >= 500]
        print("カテゴリ別値段一覧:")
        print(f"安い: {cheap}")
        print(f"普通: {medium}")
        print(f"高い: {expensive}")

    def save_to_csv(self, filename="prices.csv"):
        """
        値段一覧をCSVファイルに保存
        """
        try:
            with open(filename, mode='w', newline='') as file:
                writer = csv.writer(file)
                writer.writerow(self.prices)
            print(f"値段一覧を {filename} に保存しました。")
        except IOError as e:
            print(f"ファイル保存中にエラー: {e}")

    def load_from_csv(self, filename="prices.csv"):
        """
        CSVファイルから値段一覧を読み込む
        """
        try:
            with open(filename, mode='r') as file:
                reader = csv.reader(file)
                self.prices = [float(price) for row in reader for price in row]
            print(f"ファイル {filename} から値段一覧を読み込みました。")
        except (IOError, ValueError) as e:
            print(f"読み込み中にエラー: {e}")


def main():
    cart = ShopCart()
    while True:
        print("\n--- ショッピングカートメニュー ---")
        print("1: 値段を追加")
        print("2: 値段一覧を表示")
        print("3: 値段の数を表示")
        print("4: 合計金額を表示")
        print("5: 値段を削除 (インデックスを指定)")
        print("6: 値段を更新 (インデックスと新しい値段を指定)")
        print("7: 値段をカテゴリ別に表示")
        print("8: 値段一覧をCSVファイルに保存")
        print("9: CSVファイルから値段一覧を読み込み")
        print("10: 終了")
        choice = input("選択してください: ")

        if choice == "1":
            price = input("追加する値段を入力してください: ")
            cart.add_price(price)
        elif choice == "2":
            print("値段一覧:", cart.show_prices())
        elif choice == "3":
            print("値段の数:", cart.get_price_count())
        elif choice == "4":
            print("合計金額:", cart.get_sum_price())
        elif choice == "5":
            index = input("削除する値段のインデックスを入力してください: ")
            cart.remove_price(index)
        elif choice == "6":
            index = input("更新する値段のインデックスを入力してください: ")
            new_price = input("新しい値段を入力してください: ")
            cart.update_price(index, new_price)
        elif choice == "7":
            cart.categorize_prices()
        elif choice == "8":
            filename = input("保存するファイル名を入力してください (例: prices.csv): ")
            cart.save_to_csv(filename)
        elif choice == "9":
            filename = input("読み込むファイル名を入力してください (例: prices.csv): ")
            cart.load_from_csv(filename)
        elif choice == "10":
            print("終了します。")
            break
        else:
            print("無効な選択です。1～10の中から選んでください。")


if __name__ == "__main__":
    main()